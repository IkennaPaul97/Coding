Chapter 1
-----------------------------------
An editor is used to create the text files that contain the C++ code. There are two different types of
files:
• Source files
Source files contain definitions of global variables and functions. Each C++ program consists of at
least one source file.
• Header files
Header files, also called include files, provide the information needed in various source files.
This includes:
• Type definitions, e.g. class definitions
• Declarations of global variables and functions
• Definitions of macros and inline functions\

1.1.3 Compilers
A translation unit consists of a source file and the included header files. The compiler generates an
object file (also called module) from each translation unit; the object file contains the machine
code. In addition to the compilers that generate the machine code directly, there are also C++ into
C translation programs, so-called »C-Front-Compilers«. They translate a C++ program into a C
program. Only then is the object file created with a standard C compiler.

The linker combines object files into an executable file. Besides the self-generated object files, it
also contains the startup-code and the modules with the used functions and classes of the standard library.


The output of the umlaut 'ö' using the hexadecimal notation would look like this:
cout << "Heute ist ein sch\x94ner Tag!" << endl; // \x initiates a hexadecimal escape sequence
(“Heute ist ein schöner Tag!” translated into English is “Today is a beautiful day.”)

However, this version has a catch: If the next character can also be displayed in hexadecimal or
octal form, this character will also be interpreted. For example, in the word 'Oberfl\x84che' (Oberfläche=surface), '\x84' would not be replaced with the character 'ä', but 'x84c' with the number
'2124'. However, there is a little trick for this problem:
cout << "Oberfl\x84 \bche!" << endl;